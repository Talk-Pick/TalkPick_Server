plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.7'
    id 'io.spring.dependency-management' version '1.1.7'
}

bootJar.enabled = false

repositories {
    mavenCentral()
}

subprojects {
    group = 'talkPick'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '21'

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        // spring
        implementation 'org.springframework.boot:spring-boot-starter-web'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        // Swagger
        implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
        implementation 'javax.servlet:javax.servlet-api:4.0.1'

        // lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        // JPA (postgresql) 관련 의존성
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-jdbc'
        implementation 'org.postgresql:postgresql:42.7.1'

        // redis
        implementation 'org.springframework.boot:spring-boot-starter-data-redis'
        implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

        // jackson
        implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

        // kafka 의존성: 모듈간 통신 용도
        implementation 'org.springframework.kafka:spring-kafka'
        implementation 'org.springframework.boot:spring-boot-starter-webflux'

        // Querydsl
        implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
        annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
        annotationProcessor "jakarta.annotation:jakarta.annotation-api"
        annotationProcessor "jakarta.persistence:jakarta.persistence-api"

        testImplementation platform('org.junit:junit-bom:5.9.1')
        testImplementation 'org.junit.jupiter:junit-jupiter'
    }

    test {
        useJUnitPlatform()
    }
}

def generated = layout.buildDirectory.dir("generated/querydsl")

sourceSets {
    main {
        java {
            srcDirs += generated
        }
    }
}

clean.doLast {
    file(generated).deleteDir()
}